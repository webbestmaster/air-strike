// перед тем как что-то делать, сначала сделай все TODOшки в аиркрафте - сделано
// архитектурная таска - добавить в объекты стейты - в процессе
// сейчас это делается в Aircraft потом перенести это в game-object
// для Aircraft'a сделать ключи со значениями стейтов - сделаны два ключа для геймОбджекта
// сделан один стейт для аиркрафта - shooting - сделано
// сделать второй стейт - moving - сделано

// на дестрой - дкфолтить все стейты - сделано

// BUG - GameObject.prototype.updateBounds - не падейтятся min\max\X\Y - сделано

// сделать первый делом - сделано
вынести айдишники для нейтралов и игроков
// один ownerId и один teamId для нейтралов
// два ownerId и один teamId для игроков
// и один ownerId и один teamId для врагов
подумать - зачем вообще в этой игре нейтралы? - так, а пусть будут может потом ещё пригодятся,
по крайней мере сейчас нейтралы показывают ширину и высоту игорого мира (Cross)

// сделано
всем объектам добавить поле ownerId - и по нему определять кому принадлежат объекты
а так же добавить поле teamId - и по нему смотреть к какой комманде принадлежит объект
ownerId = 0 и teamId = 0 - для нейтралов

добавить поворот - добавить поле angle - сделано
учитывать это поле в .updateBounds() и в камере при отрисовке тоже - сделано
сделать функцию которая бы выщитывала и сохраняла бы в себе все значения косинуса и синуса углов - НЕ сделано
каждый четветь должна делить на 120 (а не на 90 или 100) так как у 120 больше делителей чем у 90 или 100 - НЕ сделано

добавить какого-нибудь врага - в процессе
и что бы его можно было убивать
и что бы он тоже стрелял
и что бы его пули меня тоже убивали
конечно добавить и плоску здоровья

// фактори - айдишники должны бысть строками а не цифрами - сделано

.... - оптимизация - для того что бы быстрее и правильней проститывались коллизии сделать метод для возвращения объекта
по которому бы считались бы коллизии

-- !! -- прикрутить полоску жизней сверху
так, если у объекта есть hasBar: true, то добавить ещё один спрайт и на падейт объекта, апдейтить и этот спрайт тоже
и выдрать все спрайты из оригинальной игры

-- !! -- придумать систему по которой производить обсчёт коллизий
например, проходить только по тем клеткам которые видны
ещё пример, ввести для объектов параметр, нужно ли сейчас делать обчёт или нет, для того случая когдая объект вне
зоны видимости камеры

-- !! -- добавить слой для лайф баров, обозвать его гейм обджект инфо
так же по ходу дела добавить слой для нотификаци и тд (не для попапов, для попапов уже есть)
.. -- !! -- для всего этого сделать коллизион менеджер - в процессе, пока отложить, сделать после того как прикручу полоску жизней
(а вообще я пока не придумал как лучше и быстрее обойти все пары в клеточке)
GO - на дестрой - удалять все айди из клоток коллизион манагера - сделано
GO - на фул дестрой - полностью удалять объект из коллизион манагер - сделано
добавить в коллизин манагер метод дестрой (такой же как у фабрики или у гейм модели) - сделано
добить логику в фактори - публишить в менеджер поллизий только если стоит useCollision
из коллизион магера проверку на юсКоллизион убрать - сделано,
прада всё равно есть один метод который всё равно вызывается при первом создании объекта не стал этим загоняться
-- !! -- // TODO: add processing of collision here !!!


как задетектить коллизию?
нужно узнать пересекаются ли прямоугольники или нет?
как это узнать, если у них есть стороны которые пересекаются - то и прямоугольники тоже пересекаются
никакой более умной идеи в голову не пришло(( хотя и это на первое время не плохая
блин, а если прямоугольник находится в другом прямоугольнике? и ничё не пересекатеся? чё тогда?
добавить проверку на то, находится ли хоть одна точка одного прямоугольника в другому
то есть надо будет делать две проверки, для одного и для другого прямоугольника
сначала проверять на наличие точек в прямоугольниках - думаю этого будет хватать в 90% случаев что бы задетектить пересечение
если этого не было - тогда уже проверять на пересечение прямых
// в утилиты были добавлены функции для детектинга коллизий, для детектинга коллизий прямоугольника есть функция util.hasRectanglesIntersection()
// функция НЕ проверенная, но выглядит внушающе доверие
// больше для того что бы начать делать коллизион манагер мне больше ничего не нужно


// добавить стейты самолётику - то есть если летит в лево то менять спрайт на повортный на лево, - сделано
// сделать 5 кадоров то есть центральный и ещё 4 - сделано

// добавить на карту несколько статичных объектов что бы можно было по ним ориентироваться - сделано
// сделать что бы камера летела за самолётом - включить функция отслеживания - сделано

// сделать камере кроевые положения - за которые бы она не выходила - сделано

// aircraft should not across a game world - сделано

// поправить движение самолёта за курсором - сделано

// добавить кнопку паузы / анпаузы - сделано
// добавить кнопку "назад" - и плюс к ней прикрутить функционал по дестрою всех игроных объектов - сделано

текстуры - все их можно хранить в дж ес файлах и добавлять вот таким образом
можно и нужно юзать ShoeBox от него конечно не такой крутой выхлоп как от texture packera но нужные опции есть и он бесплатный и кросплатформенный
var texture = PIXI.Texture.fromImage('src/sprites.png'); -- тут кроме картинки можно ещё указывать опции
PIXI.Texture.addTextureToCache(texture, 'cross'); -- опции можно посмотреть по ссылке ниже
sprite = new PIXI.Sprite.fromFrame('cross'); -- новый спрайт из фрейма
https://pixijs.github.io/docs/PIXI.Texture.html
new PIXI.Texture(baseTexture, frame, crop, trim, rotate)
core/textures/Texture.js, line 28
A texture stores the information that represents an image or part of an image. It cannot be added to the display list directly. Instead use it as the texture for a Sprite. If no frame is provided then the whole image is used.
You can directly create a texture from an image and then reuse it multiple times like this :
var texture = PIXI.Texture.fromImage('assets/image.png');
var sprite1 = new PIXI.Sprite(texture);
var sprite2 = new PIXI.Sprite(texture);
Name	Type	Description
baseTexture	PIXI.BaseTexture
The base texture source to create the texture from
frame	PIXI.Rectangle	optional
The rectangle frame of the texture to show
crop	PIXI.Rectangle	optional
The area of original texture
trim	PIXI.Rectangle	optional
Trimmed texture rectangle
rotate	boolean	optional
indicates whether the texture should be rotated by 90 degrees ( used by texture packer )
------ окончание про текстуры







добавить уровень карту
    - так придётся добавить слой для ландшафта
    - так же придётся сделать хоть какой нибудь редактор конструктов для ландшафта
    - добавить ландшафт
        - ландшафт придётся порезать на небольшие квадратики, и отрисовывать только те которые находятся в камере
    - добавить врагов и разрушаемые обекты на карту

// мысли насчёт камеры
если ширина камеры больше чем ширина мира - то ставим камеру по центру, по краям будет чёрный фон или можно какую нибудь
красивую картинку вставить как-нибудь аккуратно, что бы сильно не занимало ресурсов
если ширина камеры меньше чем ширина мира - то камера просто движется за объектом и упирается своими рамками в рамки
игрового мира

передавать в юай элементы не пиксели а величины со значениями, - сделано
что бы при ресайте экрана можно было нормально ресайзить элементы - сделано







